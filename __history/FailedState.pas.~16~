unit FailedState;

interface

uses ScreenState;

type

  TFailedState = class (TInterfacedObject, TScreenState)

    private
    tState: TScreenState;

    public
      procedure LevelStarted(TScreenState: tScreenState);
      procedure Died(TScreenState: tScreenState);
      procedure LevelCompleted(TScreenState: tScreenState);
      function getStateName: string;

      property State: TScreenState read tState write tState;

      constructor Create;
  end;

implementation

{ TFailedState }
uses LevelStartState, GameState;

constructor TFailedState.Create;
begin
// empty constructor
end;

procedure TFailedState.Died;
begin
// do nothing
end;

function TFailedState.getStateName: string;
begin
  Result := 'FailedState';
end;

procedure TFailedState.LevelCompleted;
begin
// do nothing
end;

procedure TFailedState.LevelStarted;
begin
  State := TLevelStartState.Create;
end;

end.
